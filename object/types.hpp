#ifndef __TYPES__
#define __TYPES__

#include <stdarg.h>
#include <stdlib.h>

enum TYPES {
    AAR,
    ACBM,
    AIF,
    AIFC,
    AIFF,
    ALIAS,
    ANBM,
    ANIM,
    APK,
    ASF,
    AVI,
    AVRO,
    BAC,
    BIN,
    BMP,
    BPG,
    BZ2,
    CAB,
    CHM,
    CIN,
    CLASS,
    CMUS,
    COM,
    CR2,
    CRX,
    CWK,
    DAT,
    DB,
    DBA,
    DCM,
    DCR,
    DEB,
    DER,
    DEX,
    DIB,
    DJV,
    DJVU,
    DLL,
    DMG,
    DOC,
    DOCX,
    DPX,
    EIGH_SV,
    EIGH_SVX,
    EML,
    EPUB,
    EXE,
    EXR,
    EZ2,
    EZ3,
    FAX,
    FAXX,
    FH8,
    FITS,
    FLAC,
    FLIF,
    FTXT,
    GIF,
    GZ,
    IBM,
    ICO,
    IDENTIFIER,
    IDX,
    IFF,
    ILBM,
    IPA,
    ISO,
    JAR,
    JPEG,
    JPG,
    KDB,
    KMZ,
    LBM,
    LEP,
    LUAC,
    LZ,
    LZ4,
    LZFSE,
    M2P,
    MAFF,
    MID,
    MIDI,
    MK3D,
    MKA,
    MKS,
    MKV,
    MLV,
    MP3,
    MP4,
    MPEG,
    MPG,
    MSG,
    MUS,
    NES,
    OAR,
    OBT,
    ODP,
    ODS,
    ODT,
    OGA,
    OGG,
    OGV,
    ORC,
    P25,
    PBT,
    PCAP,
    PCAPNG,
    PCV,
    PDB,
    PDF,
    PDT,
    PEA,
    PEB,
    PET,
    PGP,
    PGT,
    PIC,
    PICT,
    PIF,
    PJT,
    PK3,
    PK4,
    PKT,
    PMT,
    PNG,
    PPT,
    PPTX,
    PS,
    PSD,
    RAR,
    RC,
    RPM,
    RS,
    RTF,
    SEA,
    SEVEN_ZIP,
    SML,
    SMU,
    SMUS,
    SND,
    SQLITE,
    SQLITEDB,
    SRT,
    STG,
    SVX,
    SWF,
    TAR,
    TAR_GZ,
    TAR_XZ,
    TAR_Z,
    TDA,
    TDE,
    TDEF,
    TDF,
    THREE_G2,
    THREE_GP,
    TIF,
    TIFF,
    TOAST,
    TOX,
    TS,
    TSA,
    TSV,
    TXT,
    USDZ,
    VMDK,
    VOB,
    VPK,
    VSDX,
    WASM,
    WAV,
    WEBM,
    WEBP,
    WMA,
    WMV,
    WOFF,
    WOFF2,
    XAR,
    XLS,
    XLSX,
    XML,
    XPI,
    XZ,
    YTR,
    YUV,
    YUVN,
    Z,
    ZIP,
    ZLIB,
    ZST,
};

struct type_file {
    enum TYPES name;
    int len;
    int *header;
};


int *init(int len, ...) {
    int *result = (int*)malloc(sizeof(int)*len);
    va_list ap;
    va_start(ap, len); 
    for (int i = 0; i < len; i++) {
        result[i] = va_arg(ap, int);
    }
    va_end(ap);
    return result;
}

static struct type_file DEFAULT[128];
static int DEFAULT_LEN = 0;


/* File types Defination */
void init_type() {
    DEFAULT[0]  = {.name = ZIP,       .len=2,  .header = init(2, 80, 75)},
    DEFAULT[1]  = {.name = TAR_GZ,    .len=2,  .header = init(2, 31, 139)},
    DEFAULT[2]  = {.name = GZ,        .len=2,  .header = init(2, 31, 139)},
    DEFAULT[3]  = {.name = MP3,       .len=2,  .header = init(2, 255, 251)},
    DEFAULT[4]  = {.name = MP3,       .len=2,  .header = init(2, 255, 243)},
    DEFAULT[5]  = {.name = MP3,       .len=2,  .header = init(2, 255, 242)},
    DEFAULT[6]  = {.name = WAV,       .len=3,  .header = init(3, 82, 73, 70)},
    DEFAULT[7]  = {.name = JPG,       .len=3,  .header = init(3, 255, 216, 255)},
    DEFAULT[8]  = {.name = JPEG,      .len=3,  .header = init(3, 255, 216, 255)},
    DEFAULT[9]  = {.name = FLAC,      .len=4,  .header = init(4, 102, 76, 97, 67)},
    DEFAULT[10] = {.name = OGG,       .len=4,  .header = init(4, 79, 103, 103, 83)},
    DEFAULT[11] = {.name = OGA,       .len=4,  .header = init(4, 79, 103, 103, 83)},
    DEFAULT[12] = {.name = OGV,       .len=4,  .header = init(4, 79, 103, 103, 83)},
    DEFAULT[13] = {.name = GIF,       .len=4,  .header = init(4, 71, 73, 70, 56)},
    DEFAULT[14] = {.name = AVI,       .len=4,  .header = init(4, 82, 73, 70, 70)},
    DEFAULT[15] = {.name = PDF,       .len=5,  .header = init(5, 37, 80, 68, 70, 45)},
    DEFAULT[16] = {.name = TAR,       .len=5,  .header = init(5, 117, 115, 116, 97, 114)},
    DEFAULT[17] = {.name = RAR,       .len=6,  .header = init(6, 82, 97, 114, 33, 26, 7)},
    DEFAULT[18] = {.name = SEVEN_ZIP, .len=6,  .header = init(6, 55, 122, 188, 175, 39, 28)},
    DEFAULT[19] = {.name = PNG,       .len=8,  .header = init(8, 137, 80, 78, 71, 13, 10, 26, 10)},
    DEFAULT[20] = {.name = DOC,       .len=8,  .header = init(8, 208, 207, 17, 224, 161, 177, 26, 225)},
    DEFAULT[21] = {.name = MP4,       .len=12, .header = init(12, 0, 0, 0, 24, 102, 116, 121, 112, 105, 115, 111, 109)},
    DEFAULT_LEN = 22;
}

void free_type() {
    for (int i=0; i<DEFAULT_LEN; i++) {
        free(DEFAULT[i].header);
    }
}

#endif /*__TYPES__*/